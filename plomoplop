#/bin/bash

# plomoplop: plomlompom's bash implementation of the oplop algorithm as
# described in <http://code.google.com/p/oplop/wiki/HowItWorks>
# 
# Copyright 2013 Christian Heller / <http://www.plomlompom.de/>
# License: GPLv3 or any later version. See file LICENSE for details.

# Try to get master password (-p) and account nick (-a) as parameters.
# If -n is given, set option for echo command to not add final newline.
while getopts ':ha:s' opt; do
  case $opt in
    h)
      echo 'Usage: plomoplop [OPTION]
Generate password from a master password and an account nickname as described
by the oplop algorithm.

Options:
  -h                    Display this help.
  -a ACCOUNT_NICKNAME   Set account nickname (instead of prompting for it).
  -s                    Read in master password from stdin.

For details on the oplop algorithm, see: http://code.google.com/p/oplop/'
      exit 0
      ;;
    a)
      accountnick=$OPTARG
      ;;
    s)
      readstin=1
      ;;
    ?)
      echo 'Bad command syntax. Try "plomoplop -h" for help.'
      exit 1
      ;;
  esac
done

# If -s, read in $masterpw from stdin. Then, return stdin to tty prompt.
if [[ $readstin ]]; then
  read -r masterpw
  exec 0< /dev/tty
fi

# Read in account nick if not given by parameter.
if [[ $accountnick == '' ]]; then
  echo 'Enter account nickname:'
  read -r accountnick
fi

# Read in master password, invisibly, if not given by parameter. Demand
# master password twice to make sure it was typed in correctly.
if [[ $masterpw == '' ]]; then
  echo 'Enter master password:'
  stty -F `tty` -echo
  read -r masterpw
  echo 'Re-type master password:'
  read -r masterpw_cmp
  stty -F `tty` echo
  if [[ $masterpw != $masterpw_cmp ]]; then
    echo 'Error: Master password was not typed in identically twice.'
    exit 1
  fi
fi

# Concatenate parameters to $string; get md5sum's hex representation.
string=`echo -n $masterpw$accountnick | md5sum | cut -c-32`

# Transform hex representation of md5sum to binary data.
string=`echo -e $(echo -n $string | sed -e 's/../\\\x&/g')`

# Generate URL-safe base64 string from binary md5sum.
string=`echo $string | base64 | tr '+' '-' | tr '/' '_'`

# If the first 8 chars contain a digit, return those as the password.
pwtemp=`echo $string | cut -c -8`
if [[ $pwtemp == *[0-9]* ]]; then
  echo $pwtemp
  exit
fi

# $prefix will be prefixed to the non-digit part of the password.
prefix='1'

# Try to find a first all-digit substring in $string, make it $prefix.
pos=`expr index $string '0123456789'`
if [[ $pos > 0 ]]; then
  len=1
  pos=`expr $pos - 1`
  while [[ ${string:pos+len:1} == [0-9] ]]; do
    len=`expr $len + 1`
  done
  prefix=${string:pos:len}
fi

# Cut string result down to password length.
echo -n $prefix$string | cut -c -8
