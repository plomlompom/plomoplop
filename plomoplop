#/bin/bash

# plomoplop:
# 
# plomlompom's bash implementation of the Oplop algorithm as described
# in <http://code.google.com/p/oplop/wiki/HowItWorks>
# 
# For an alternative, much shorter (one-line) bash implementation that
# depends on xxd, see: <http://codegolf.stackexchange.com/a/4995>

# Get account nickname as parameter.
if [[ $1 == '' ]]
then
  echo 'usage: plomoplop ACCOUNT_NICKNAME'
  exit
fi

# Read in invisible passwort.
echo 'Enter master password:'
stty -F `tty` -echo
read -r masterpw
stty -F `tty` echo

# Concatenate parameters to $string; get md5sum's hex representation.
string=`echo -n $masterpw$1 | md5sum | cut -c-32`

# Transform hex representation of md5sum to binary data.
string=`echo -e $(echo -n $string | sed -e 's/../\\\x&/g')`

# Generate URL-safe base64 string from binary md5sum.
string=`echo $string | base64 | tr '+' '-' | tr '/' '_'`

# If the first 8 chars contain a digit, return those as the password.
pwtemp=`echo $string | cut -c -8`
if [[ $pwtemp == *[0-9]* ]]
then
  echo $pwtemp
  exit
fi

# $prefix will be prefixed to the non-digit part of the password.
prefix='1'

# Try to find a first all-digit substring in $string, make it $prefix.
pos=`expr index $string '0123456789'`
if [[ $pos > 0 ]]
then
  len=1
  pos=`expr $pos - 1`
  while [[ ${string:pos+len:1} == [0-9] ]]
  do
    len=`expr $len + 1`
  done
  prefix=${string:pos:len}
fi

# Return password.
echo $prefix$string | cut -c -8
