#/bin/bash

# plomoplop:
# 
# plomlompom's bash implementation of the Oplop algorithm as described
# in <http://code.google.com/p/oplop/wiki/HowItWorks>
# 
# For an alternative, much shorter (one-line) bash implementation that
# depends on xxd, see: <http://codegolf.stackexchange.com/a/4995>

# Try to get master password (-p) and account nick (-a) as parameters.
# If -n is given, set option for echo command to not add final newline.
while getopts 'na:p:' opt; do
  case $opt in
    n)
      setn='-n'
      ;;
    a)
      accountnick=$OPTARG
      ;;
    p)
      masterpw=$OPTARG
      ;;
    ?)
      echo 'usage: plomoplop [-p master_password] [-a account_nickname]'
      exit 1
      ;;
  esac
done

# Read in account nick if not given by parameter.
if [[ $accountnick == '' ]]; then
  echo 'Enter account nickname:'
  read -r accountnick
fi

# Read in master password, invisibly, if not given by parameter. Demand
# master password twice to make sure it was typed in correctly.
if [[ $masterpw == '' ]]; then
  echo 'Enter master password:'
  stty -F `tty` -echo
  read -r masterpw
  echo 'Re-type master password:'
  read -r masterpw_cmp
  stty -F `tty` echo
  if [[ $masterpw != $masterpw_cmp ]]; then
    echo 'Error: Master password was not typed in identically twice.'
    exit 1
  fi
fi

# Concatenate parameters to $string; get md5sum's hex representation.
string=`echo -n $masterpw$accountnick | md5sum | cut -c-32`

# Transform hex representation of md5sum to binary data.
string=`echo -e $(echo -n $string | sed -e 's/../\\\x&/g')`

# Generate URL-safe base64 string from binary md5sum.
string=`echo $string | base64 | tr '+' '-' | tr '/' '_'`

# If the first 8 chars contain a digit, return those as the password.
pwtemp=`echo $string | cut -c -8`
if [[ $pwtemp == *[0-9]* ]]
then
  echo $pwtemp
  exit
fi

# $prefix will be prefixed to the non-digit part of the password.
prefix='1'

# Try to find a first all-digit substring in $string, make it $prefix.
pos=`expr index $string '0123456789'`
if [[ $pos > 0 ]]
then
  len=1
  pos=`expr $pos - 1`
  while [[ ${string:pos+len:1} == [0-9] ]]
  do
    len=`expr $len + 1`
  done
  prefix=${string:pos:len}
fi

# Cut string result down to password length.
pw=`echo -n $prefix$string | cut -c -8`
echo $setn $pw
